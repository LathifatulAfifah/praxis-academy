# -*- coding: utf-8 -*-
"""Kasus 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LnApS-QgZA-Ag6Skla9kJNL9QTv5nDzu
"""

#BUBBLE SORT

def bubblesort(alist):
    iterasi = 0
    for j in range(len(alist)-1): #model biasa
        for i in range(len(alist)-1-j):
            if alist[i]>alist[i+1]:
                alist[i],alist[i+1]=alist[i+1],alist[i]
        iterasi+=1
        print(iterasi,alist)
 
alist = [2,5,1,7,6,3,4]
bubblesort(alist)

#SELECTION SORT


def selection(lis):
    iterasi = 0
    for i in range(len(lis)-1):
        minimal = i
        for j in range(i+1,len(lis)):
            if lis[j] < lis[minimal]:
                minimal = j
        iterasi += 1
        lis[minimal],lis[i]= lis[i],lis[minimal]
        print(iterasi,lis)
lis=[3,5,12,10,4,9,14,11,6,8,13,2,7,]
selection(lis)

#INSERTION SORT

def InsertionSort(val):
   for index in range(1,len(val)):
 
     valueaktif = val[index]
     posisi = index
 
     while posisi>0 and val[posisi-1]>valueaktif:
         val[posisi]=val[posisi-1]
         posisi = posisi-1
 
     val[posisi]=valueaktif
 
DaftarAngka = [2,8,5,3,7,4,1,6]
InsertionSort(DaftarAngka)
print(DaftarAngka)

#QUICK SORT

def quickshort(a,start,end):
    if start<end:
        pindex = partition(a,start,end)
        quickshort(a,start,pindex-1)
        quickshort(a,pindex+1,end)
 
def partition(a,start,end):
    middle = int(end/2)
    pivot = a[middle]
    pindex = start
    for i in range(start,middle):
        if a[i]>=pivot:
            a[i],a[pindex]=a[pindex],a[i]
            pindex = pindex + 1
    a[pindex],a[middle]=a[middle],a[pindex]
    print(a)
    return pindex
 
a = [68,90,78,44,34,20,100,56,34,2]
quickshort(a,0,len(a)-1)

#MERGE SORT

def merge_sort(list_bilangan):
  jumlah_bilangan =  len(list_bilangan)
  if jumlah_bilangan > 1:
    posisi_tengah = len(list_bilangan)//2
    potongan_kiri = list_bilangan[:posisi_tengah]
    potongan_kanan = list_bilangan[posisi_tengah:]
    
    merge_sort(potongan_kiri)
    merge_sort(potongan_kanan)

    jumlah_bilangan_kiri = len(potongan_kiri)
    jumlah_bilangan_kanan = len(potongan_kanan)
    c_all,c_kiri,c_kanan = 0,0,0 # pencacah/counter
    print('Sebelum merge:',list_bilangan)  
    print('Potongan sebelum merge:',potongan_kiri,':',potongan_kanan)
    while c_kiri < jumlah_bilangan_kiri or c_kanan < jumlah_bilangan_kanan:
      if c_kiri == jumlah_bilangan_kiri: # elemen di potongan kiri habis
        list_bilangan[c_all] = potongan_kanan[c_kanan]
        c_kanan = c_kanan + 1
      elif c_kanan == jumlah_bilangan_kanan: # elemen di potongan kanan habis
        list_bilangan[c_all] = potongan_kiri[c_kiri]
        c_kiri = c_kiri + 1
      elif potongan_kiri[c_kiri] <= potongan_kanan[c_kanan]: # nilai elemen di potongan kiri lebih kecil
        list_bilangan[c_all] = potongan_kiri[c_kiri]
        c_kiri = c_kiri + 1
      else: # nilai elemen di potongan kanan lebih besar
        list_bilangan[c_all] = potongan_kanan[c_kanan]
        c_kanan = c_kanan + 1
      c_all = c_all + 1
    print('Setelah merge:', list_bilangan)
    print()
          
angka = [6,5,3,1,8,7,2,4]
print('Sebelum sort:',angka)
merge_sort(angka)
print('Setelah sort:',angka)